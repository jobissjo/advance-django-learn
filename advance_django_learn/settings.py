"""
Django settings for advance_django_learn project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
import colorlog

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'adrf',
    "drf_spectacular",
    'logging_learn',
    "api_testing",
    "learn_celery",
    'adrf_learn',
    "integrate_tortoise_orm"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'advance_django_learn.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'learn_celery/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'advance_django_learn.wsgi.application'
ASGI_APPLICATION = 'advance_django_learn.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

TORTOISE_ORM = {
    'connections': {
        'tortoise_db': f"sqlite:///{BASE_DIR/'tortoise_db.sqlite3'}"
    },
    "apps": {
        "async_app": {
            "models": ["integrate_tortoise_orm.models"],
            "default_connection": "tortoise_db",
        }
    },
    "use_tz": False
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# LOGGING
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

LOGGING_FILE_HANDLER = 'logging.FileHandler'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        }
    },
    "formatters": {
        "simple": {
            "format": "{levelname} {asctime:s} {name} {message}",
            "style": "{"
        },
        "verbose": {
            "format": "{levelname} {asctime:s} {name} {module}.py (line {lineno:d}) {funcName} {message}",
            "style": "{"
        },
        "colorized": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s%(levelname)-8s %(asctime)s %(name)s %(message)s",
            "log_colors": {
                "DEBUG": "cyan",
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "bold_red",
            }
        }
    },
    "handlers": {
        "console_colored": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "colorized",

        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        "file": {
            "level": "INFO",
            "class": LOGGING_FILE_HANDLER,
            "filename": BASE_DIR / "logs/django.log",
            "formatter": "verbose"
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_false"],
            "formatter": "verbose",
            "include_html": True,
        },
        "logging_learn_file": {
            "level": "INFO",
            "class": LOGGING_FILE_HANDLER,
            "filename": BASE_DIR / "logs/logging_learn.log",
            "formatter": "verbose"
        },
        "template_file": {
            "level": "ERROR",
            "class": LOGGING_FILE_HANDLER,
            "filename": BASE_DIR / "logs/template.log",
            "formatter": "simple"
        },
        "adrf_learn_file":{
            "level": "INFO",
            "class": LOGGING_FILE_HANDLER,
            "filename": BASE_DIR / "logs/adrf_learn.log",
            "formatter": "simple"
        }
    },
    "loggers": {
        "logging_learn": {
            "handlers": ["console_colored", "logging_learn_file", "mail_admins"],
            "level": "INFO",
            "propagate": True
        },
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "django.template": {
            "handlers": [ "template_file"],
            "level": "ERROR",
            "propagate": True,
        },
        "adrf_learn": {
            "handlers": ["adrf_learn_file", "console_colored" ],
            "level": "INFO",
            "propagate": True,
        }
    }
}

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema"
}

# ADMIN 

ADMINS = [
    ('Admin User', 'admin@example.com'),
]

# CELERY

CELERY_BROKER_URL = 'redis://localhost:6379/0'
accept_content = ['json']
task_serializer = 'json' 


# EMAIL SETTINGS

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT') 
EMAIL_USE_TLS = True  
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') 

# OPEN API SCHEMA VALIDATION

SPECTACULAR_SETTINGS = {
    "TITLE": "Advance Django Learn",
    "DESCRIPTION": "API Documentation for Advance Django Learn",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False
}